plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'io.github.isharipov'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

springBoot {
    buildInfo()
}

repositories {
    mavenCentral()
}

ext.versions = [
        springCloud           : '2024.0.1',
        jjwt                  : '0.12.6',
        openapi               : '2.8.8',
        mapstruct             : '1.6.3',
        logstashLogbackEncoder: '8.0',
        javaFaker             : '1.0.2',
        snakeyaml             : '2.2'
]

dependencies {
    /** Spring */
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-vault-config'
    /** JWT */
    implementation "io.jsonwebtoken:jjwt-api:${versions.jjwt}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${versions.jjwt}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${versions.jjwt}"
    /** Swagger */
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${versions.openapi}"
    /** DB */
    implementation("org.liquibase:liquibase-core")
    runtimeOnly 'org.postgresql:postgresql'
    /** Infra */
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation "org.mapstruct:mapstruct:${versions.mapstruct}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${versions.mapstruct}"
    implementation "net.logstash.logback:logstash-logback-encoder:${versions.logstashLogbackEncoder}"
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    /** Test */
    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation("com.github.javafaker:javafaker:${versions.javaFaker}") {
        exclude group: "org.yaml", module: "snakeyaml"
    }
    testImplementation "org.yaml:snakeyaml:${versions.snakeyaml}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${versions.springCloud}"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            '-Amapstruct.defaultComponentModel=spring'
    ]

    options.incremental = true
}

tasks.named('test') {
    useJUnitPlatform()

    reports {
        html.required = true
        junitXml.required = true
    }
}

jacoco {
    toolVersion = "0.8.10"
}

tasks.named('jacocoTestReport') {
    dependsOn tasks.named('test')

    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}
